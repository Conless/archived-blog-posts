{
    "version": "https://jsonfeed.org/version/1",
    "title": "夢の日記 • All posts by \"computer science\" category",
    "description": "Stay hungry. Stay foolish.",
    "home_page_url": "https://conless.dev/blog",
    "items": [
        {
            "id": "https://conless.dev/blog/cs/data-structure/priority_queue/",
            "url": "https://conless.dev/blog/cs/data-structure/priority_queue/",
            "title": "数据结构（三）：堆与 STL priority_queue",
            "date_published": "2023-02-21T03:32:00.000Z",
            "content_html": "<h1 id=\"堆\"><a class=\"markdownIt-Anchor\" href=\"#堆\">#</a> 堆</h1>\n<h2 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>相较于平衡树等，堆是一种约束较为自由的数据结构，只需要满足父节点的键值大于 / 小于子节点即可。</p>\n<h2 id=\"二叉堆\"><a class=\"markdownIt-Anchor\" href=\"#二叉堆\">#</a> 二叉堆</h2>\n<p>下面讲解以二叉堆方式实现的大根堆，它是一棵完全二叉树，其保持平衡的基本方式是向上调整（子节点与父节点交换）与向下调整。</p>\n<h3 id=\"插入\"><a class=\"markdownIt-Anchor\" href=\"#插入\">#</a> 插入</h3>\n<p>在插入时，将新的节点插入到完全二叉树的最后一个位置，然后不断向上调整；</p>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\">#</a> 删除</h3>\n<p>在删除根节点时，将其与最后一个节点交换，将其删除，然后将新的根节点不断向下调整。</p>\n<h3 id=\"建树\"><a class=\"markdownIt-Anchor\" href=\"#建树\">#</a> 建树</h3>\n<p>假设直接按照顺序构建出一棵完全二叉树，然后对其调整使得满足堆的性质，有两种方案：</p>\n<ol>\n<li>从根开始，不断向上调整，这样在越深处越多节点，走的距离期望越长，总的复杂度期望为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n<li>从叶子节点开始，不断向下调整，这样在越深处越多节点，但走的距离期望短，总的复杂度期望为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ol>\n<p>因此，采取第二种方案更加合理。</p>\n<h3 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h3>\n<p>对顶堆：一个小根堆与一个大根堆结合，共同维护序列的第 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 大数。</p>\n<h2 id=\"左偏树\"><a class=\"markdownIt-Anchor\" href=\"#左偏树\">#</a> 左偏树</h2>\n<p>左偏树是一种可并堆。它是一棵具有 “左偏” 性质的二叉树。</p>\n<h3 id=\"左偏性\"><a class=\"markdownIt-Anchor\" href=\"#左偏性\">#</a> 左偏性</h3>\n<p>dist：一个节点到子节点中外节点的最短距离，其中外节点指没有左儿子或没有右儿子的节点。<br>\n左偏性：若一棵二叉树中任意节点左儿子的 dist 大于右儿子的 dist，称其具有左偏性。</p>\n<h3 id=\"合并\"><a class=\"markdownIt-Anchor\" href=\"#合并\">#</a> 合并</h3>\n<p>合并操作是一个左偏树的核心操作，他同时完成了合并两组数据与维持树的高度两个操作。其核心思想是，尽可能地往右子树里面添加东西，如果发现添加出了问题，就将左右子树交换。递归地讲：</p>\n<ol>\n<li>对于两个左偏树，去值较小的根作为树根</li>\n<li>将另一棵树与右子树合并</li>\n<li>检查是否需要交换左右子树</li>\n</ol>\n<h3 id=\"其他操作\"><a class=\"markdownIt-Anchor\" href=\"#其他操作\">#</a> 其他操作</h3>\n<ol>\n<li>插入：树与节点的合并</li>\n<li>删除：合并根的左右儿子</li>\n</ol>\n<h3 id=\"拓展操作\"><a class=\"markdownIt-Anchor\" href=\"#拓展操作\">#</a> 拓展操作</h3>\n<ol>\n<li>删除任意节点：将左右儿子合并，向上更新 dist 直到无需更新</li>\n<li>整个堆进行算术操作：在根上打标记，删除 / 合并的时候 pushdown 即可</li>\n</ol>\n<h3 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node <span class=\"token operator\">*</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> node <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> y <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>data <span class=\"token operator\">></span> y<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    x<span class=\"token operator\">-></span>rson <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>rson<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    x<span class=\"token operator\">-></span>rson<span class=\"token operator\">-></span>rt <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>rt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>lson <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> x<span class=\"token operator\">-></span>lson<span class=\"token operator\">-></span>dis <span class=\"token operator\">&lt;</span> x<span class=\"token operator\">-></span>rson<span class=\"token operator\">-></span>dis<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>lson<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>rson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    x<span class=\"token operator\">-></span>dis <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>rson <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">-></span>rson<span class=\"token operator\">-></span>dis <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">*</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    x<span class=\"token operator\">-></span>rt <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>lson<span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span>rson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>lson<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        x<span class=\"token operator\">-></span>lson<span class=\"token operator\">-></span>rt <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>rt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>rson<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        x<span class=\"token operator\">-></span>rson<span class=\"token operator\">-></span>rt <span class=\"token operator\">=</span> x<span class=\"token operator\">-></span>rt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    x<span class=\"token operator\">-></span>dis <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/data-structure/string_algo/",
            "url": "https://conless.dev/blog/cs/data-structure/string_algo/",
            "title": "数据结构（二）：字符串算法",
            "date_published": "2023-02-19T14:06:00.000Z",
            "content_html": "<h1 id=\"前缀函数与-kmp-算法\"><a class=\"markdownIt-Anchor\" href=\"#前缀函数与-kmp-算法\">#</a> 前缀函数与 KMP 算法</h1>\n<h2 id=\"前缀函数\"><a class=\"markdownIt-Anchor\" href=\"#前缀函数\">#</a> 前缀函数</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h3>\n<p>对于一个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的字符串 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>，其最大相等前后缀长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 当</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo>⋯</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>⋯</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[0\\cdots k-1]=s[n-k+1\\cdots n]\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span></span></p>\n<p>且 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 是满足这一条件的最大值。对于整个字符串，其前缀函数就是一个长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 的数组 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\pi[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span>，其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\pi[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 的值为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo>⋯</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[0\\cdots i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 的最大相等前后缀长度。特别地，规定 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\pi[0]=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></p>\n<p>例如，字符串</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi><mi>a</mi><mi>b</mi><mi>c</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">abcdabcde\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span></span></span></span></span></p>\n<p>就有</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>π</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\pi=\\{0,0,0,0,1,2,3,4,0\\}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span></span></p>\n<h3 id=\"前缀函数的计算\"><a class=\"markdownIt-Anchor\" href=\"#前缀函数的计算\">#</a> 前缀函数的计算</h3>\n<h4 id=\"朴素算法\"><a class=\"markdownIt-Anchor\" href=\"#朴素算法\">#</a> 朴素算法</h4>\n<p>trivial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h4 id=\"匹配优化\"><a class=\"markdownIt-Anchor\" href=\"#匹配优化\">#</a> 匹配优化</h4>\n<p>注意到相邻两项有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>π</mi><mo>≤</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\Delta\\pi\\le 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，这是因为<br>\n于是可以在朴素算法的前提下进行优化，将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\pi[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> 的枚举上界设为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\pi[n-1]+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，这样一来，容易证明时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>。</p>\n<h4 id=\"失配优化\"><a class=\"markdownIt-Anchor\" href=\"#失配优化\">#</a> 失配优化</h4>\n<p>在上一个优化中，我们处理了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_{n+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span> 的最优情况，即完成匹配，下面讨论无法完成匹配的情况，容易发现，下一个应该尝试的长度最大为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><msub><mi>π</mi><mi>n</mi></msub><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_{\\pi_n - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68066em;vertical-align:-0.2501em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2501em;\"><span></span></span></span></span></span></span></span></span></span>，这是因为其为满足 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo>⋯</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo>⋯</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">s[0\\cdots i-1]=s[n-i+1\\cdots n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> 的次大 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>。</p>\n<p>这样一来，我们就可以得到一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的算法了。</p>\n<h4 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h4>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">prefix_funtion</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">pi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> pi<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            j <span class=\"token operator\">=</span> pi<span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pi<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"应用\"><a class=\"markdownIt-Anchor\" href=\"#应用\">#</a> 应用</h2>\n<h3 id=\"kmp-算法\"><a class=\"markdownIt-Anchor\" href=\"#kmp-算法\">#</a> KMP 算法</h3>\n<h4 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\">#</a> 过程</h4>\n<p>给定一个文本串 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 与模式串 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span>，尝试找到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 中的所有出现。</p>\n<h4 id=\"算法\"><a class=\"markdownIt-Anchor\" href=\"#算法\">#</a> 算法</h4>\n<p>考虑问题的本质：是否在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> 中存在一段 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>⋯</mo><mi>i</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">t[i\\cdots i+n-1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> 使得其与 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 完全相等，显然，这可以转化为一个求前缀函数的问题，构造字符串</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>s</mi><mo>+</mo><mi mathvariant=\"normal\">#</mi><mo>+</mo><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">s+\\#+t\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">#</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span></span></p>\n<p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">#</mi></mrow><annotation encoding=\"application/x-tex\">\\#</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">#</span></span></span></span> 代表一个无义分隔符。接下来，考虑在 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 之后的区域考虑前缀函数，显然，找到匹配当且仅当 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mi>i</mi></msub><mo>=</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\pi_i=n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>。</p>\n<h3 id=\"求字符串的周期\"><a class=\"markdownIt-Anchor\" href=\"#求字符串的周期\">#</a> 求字符串的周期</h3>\n<p>若字符串内存在一个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 的周期，则显然其有一段长度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">n-l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> 的相等前后缀。于是，根据求前缀函数的方式可以找到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 的最小周期，通过失配优化可以找到其所有周期。</p>\n<h3 id=\"统计每个前缀的出现次数\"><a class=\"markdownIt-Anchor\" href=\"#统计每个前缀的出现次数\">#</a> 统计每个前缀的出现次数</h3>\n<p>寻找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span></span></span></span> 的每一个前缀的出现次数，朴素方法是跑 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 次 KMP，时间复杂度在平方量级，但是通过失配优化，很容易变成线性。</p>\n<h3 id=\"字符串压缩\"><a class=\"markdownIt-Anchor\" href=\"#字符串压缩\">#</a> 字符串压缩</h3>\n<p>与字符串周期是类同的，证明比较烦。</p>\n<h1 id=\"字符串哈希\"><a class=\"markdownIt-Anchor\" href=\"#字符串哈希\">#</a> 字符串哈希</h1>\n<h2 id=\"定义-2\"><a class=\"markdownIt-Anchor\" href=\"#定义-2\">#</a> 定义</h2>\n<p>把字符串映射为一个整数，注意时间复杂度与 Hash 的准确率（避免 Hash 碰撞）。</p>\n<h2 id=\"应用-2\"><a class=\"markdownIt-Anchor\" href=\"#应用-2\">#</a> 应用</h2>\n<h3 id=\"字符串匹配\"><a class=\"markdownIt-Anchor\" href=\"#字符串匹配\">#</a> 字符串匹配</h3>\n<p>求文本串每个字串的哈希值，与模式串直接比较即可。</p>\n<h3 id=\"允许-k-次失配的字符串匹配\"><a class=\"markdownIt-Anchor\" href=\"#允许-k-次失配的字符串匹配\">#</a> 允许 k 次失配的字符串匹配</h3>\n<p>匹配时允许至多有 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 个位置上的字符不同（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 较小）。考虑哈希 + 二分，可以在每一次匹配过程中用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的时间找到所有失配字符，总时间复杂度为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>k</mi><mi>m</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(km\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n<h3 id=\"最长回文子串\"><a class=\"markdownIt-Anchor\" href=\"#最长回文子串\">#</a> 最长回文子串</h3>\n<p>枚举回文中心 + 二分，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>，好像 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 哈希也可以，先咕。</p>\n<h1 id=\"ac-自动机\"><a class=\"markdownIt-Anchor\" href=\"#ac-自动机\">#</a> AC 自动机</h1>\n<h2 id=\"什么是自动机\"><a class=\"markdownIt-Anchor\" href=\"#什么是自动机\">#</a> 什么是自动机？</h2>\n<p>自动机的本质是一个状态转移函数</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(v, c)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> 代表一个状态，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> 代表一个新输入的字符。这个函数的输出结果是一个新的状态，也即：一个自动机在接受一个字符后由一种状态切换到另一种状态。有一些熟知的例子：</p>\n<ol>\n<li>Trie 树：接受一个字符后，向下沿着树边走到一个子节点；</li>\n<li>KMP 自动机：接受一个字符后，若匹配，将状态变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">v+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>，若失配，变为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi><mo stretchy=\"false\">(</mo><mi>π</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\delta(\\pi(i),c)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>。</li>\n</ol>\n<p>而 AC 自动机就是上面两者的结合。</p>\n<h2 id=\"用途\"><a class=\"markdownIt-Anchor\" href=\"#用途\">#</a> 用途</h2>\n<p>一个文本串，多个模式串进行匹配</p>\n<h2 id=\"失配优化-2\"><a class=\"markdownIt-Anchor\" href=\"#失配优化-2\">#</a> 失配优化</h2>\n<p>核心是在 Trie 树上跑失配指针。例如，对于字符串 abcd，bce，cf 构成的 Trie 树，若读入 abc 后在 d 处失配，将会把指针跳到 bce 字符串的 bc 后进行匹配，若再次失配，将跳到 cf 的 f 后进行匹配，依此类推。</p>\n<h2 id=\"实现-2\"><a class=\"markdownIt-Anchor\" href=\"#实现-2\">#</a> 实现</h2>\n<p>首先是建立失配指针的过程</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 子节点存在，让 fail 指针指向父节点（拓扑序保证父节点 fail 指针的最优性）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                fail<span class=\"token punctuation\">[</span>tr<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tr<span class=\"token punctuation\">[</span>fail<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 子节点不存在，直接跳转</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                tr<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tr<span class=\"token punctuation\">[</span>fail<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来，进行匹配时，只需要不断跳指针即可</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> e<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//e [i] 表示以 i 结尾的模式串个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> ch<span class=\"token operator\">:</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        u <span class=\"token operator\">=</span> tr<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ch <span class=\"token operator\">-</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一步到位跳到失配节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> fail<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            ans <span class=\"token operator\">+=</span> e<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把每一个匹配都记录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            e<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 已经匹配到了</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/data-structure/vector/",
            "url": "https://conless.dev/blog/cs/data-structure/vector/",
            "title": "数据结构（一）：STL vector",
            "date_published": "2023-02-19T02:10:00.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/data-structure/map/",
            "url": "https://conless.dev/blog/cs/data-structure/map/",
            "title": "数据结构（三）：红黑树与 STL map",
            "date_published": "2023-02-19T02:10:00.000Z",
            "content_html": "<h1 id=\"红黑树\"><a class=\"markdownIt-Anchor\" href=\"#红黑树\">#</a> 红黑树</h1>\n<p>红黑树是一种平衡树，其维持平衡的基本方式为保证每条路径上黑色节点的数量相同。</p>\n<h2 id=\"基础性质\"><a class=\"markdownIt-Anchor\" href=\"#基础性质\">#</a> 基础性质</h2>\n<ol>\n<li>节点为红色或黑色</li>\n<li>空叶子节点（NIL）为黑色</li>\n<li>没有两个连续的红色节点</li>\n<li>从根到 NIL 的每条路径的黑色节点数量相同</li>\n</ol>\n<h2 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h2>\n<p>一个节点需要包含的信息</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token class-name\">color</span><span class=\"token punctuation\">&#123;</span> RED<span class=\"token punctuation\">,</span> BLACK <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tnode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    tnode <span class=\"token operator\">*</span>left<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>right<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    color col<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Key key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    T data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>整棵树需要储存的基本信息</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Key</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Compare</span> <span class=\"token operator\">=</span> std<span class=\"token double-colon punctuation\">::</span>less<span class=\"token operator\">&lt;</span>Key<span class=\"token operator\">>></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">key</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    tnode <span class=\"token operator\">*</span>rt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    size_t siz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"操作\"><a class=\"markdownIt-Anchor\" href=\"#操作\">#</a> 操作</h2>\n<h3 id=\"旋转\"><a class=\"markdownIt-Anchor\" href=\"#旋转\">#</a> 旋转</h3>\n<p>左旋是这样的：</p>\n<pre><code>  rt              r0\n /  \\            /  \\\nl0   r0  ----&gt;  rt  r1\n    /  \\       /  \\\n   l1  r1     l0  l1\n</code></pre>\n<p>实际上，就是做了个根和右儿子的交换，其它东西放在能放的位置。</p>\n<p>右旋是这样的</p>\n<pre><code>    rt             l0\n   /  \\           /  \\\n  l0  r0  ----&gt;  l1  rt\n /  \\               /  \\\nl1  r1             r1  r0\n</code></pre>\n<p>实际上，就是做了个根和左儿子的交换，其它东西放在能放的位置。</p>\n<h3 id=\"插入\"><a class=\"markdownIt-Anchor\" href=\"#插入\">#</a> 插入</h3>\n<p>红黑树将新插入的节点初始化为红色节点，先按照正常 BST 的方式找到应该在哪里进行插入，此时，若父节点是黑色节点，显然没问题，若父节点 P 是非根的红色节点，分以下几种情况：</p>\n<ol>\n<li>当前节点的父节点 P 和叔节点 U 均为红色，这意味着祖父为黑，可以直接将祖父染红，P U 染黑</li>\n</ol>\n<pre><code>    BLACK             RED\n   /    \\            /   \\\n  RED   RED ----&gt; BLACK BLACK\n  /               /\n&lt;NEW&gt;           &lt;NEW&gt;\n</code></pre>\n<p>此时有可能有一个新的问题：要是祖父节点染红导致了性质破坏（连续红色节点）怎么办？这个时候可以递归地向上跳，不断进行维护，使得这一性质始终满足。这是染色中相对简单的情况。</p>\n<ol start=\"2\">\n<li>当前节点的父节点 P 为红，但是叔节点 U 为黑，这个时候需要让新插入的节点在父节点的外侧节点上（如左儿子的外侧节点也为左儿子），如果不是的话，首先进行旋转操作：</li>\n</ol>\n<ul>\n<li>父节点在左子树上，旋转为 LL 的情况。</li>\n</ul>\n<pre><code>    BLACK               BLACK\n   /     \\             /     \\\n  RED   BLACK ----&gt;  &lt;NEW&gt;  BLACK\n /  \\                /  \\\nA   &lt;NEW&gt;           RED  C\n    /   \\          /  \\\n   B     C        A    B\n</code></pre>\n<p>随后进行红黑树的 LLb 旋转，本质上就是父辈三个节点右旋</p>\n<pre><code>     BLACK                   RED\n    /     \\                /    \\\n   RED  BLACK            RED    BLACK\n  /  \\          ----&gt;   /   \\   /   \\\n RED  C                A     B C    BLACK\n /  \\\nA    B\n</code></pre>\n<p>注意其中 ABC 均为黑色节点，所以此时黑色节点个数不再平衡，需要进行染色，这一步操作也不困难，将 RED - BLACK 的连线改为 BLACK - RED 即可。</p>\n<ul>\n<li>父节点在右子树上，旋转为 RR 的情况。</li>\n</ul>\n<pre><code>      BLACK                 BLACK\n     /     \\               /     \\\n  BLACK    RED           BLACK   RED\n          /   \\   ----&gt;         /   \\\n        &lt;NEW&gt;  A               C    &lt;NEW&gt;\n        /   \\                       /   \\\n       B     C                     B     A\n</code></pre>\n<p>随后进行红黑树的 RRb 旋转，本质就是父辈三个节点左旋</p>\n<pre><code>     BLACK                RED\n    /     \\             /     \\\n  BLACK  RED ----&gt;   BLACK    RED\n         /  \\        /   \\    /  \\\n        A   RED   BLACK   A  B    C\n           /   \\\n          B     C\n</code></pre>\n<p>同理，将 RED - BLACK 连线改为 BLACK - RED。</p>\n",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/shulian-poufen/",
            "url": "https://conless.dev/blog/cs/shulian-poufen/",
            "title": "数据结构（四）：树链剖分 (updating)",
            "date_published": "2023-01-27T06:03:43.000Z",
            "content_html": "<h2 id=\"学习计划\"><a class=\"markdownIt-Anchor\" href=\"#学习计划\">#</a> 学习计划</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">事项</th>\n<th style=\"text-align:center\">详情</th>\n<th style=\"text-align:center\">时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">重温基本概念</td>\n<td style=\"text-align:center\">参考课本与 OI-wiki</td>\n<td style=\"text-align:center\">1h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基础题目练习</td>\n<td style=\"text-align:center\">复习 P2590,P2146,P3178，完成 P4427,ACMOJ1473</td>\n<td style=\"text-align:center\">2.5h</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">概念细节与拓展</td>\n<td style=\"text-align:center\">课本，OI-wiki，完成或学习 P1505 / P3979</td>\n<td style=\"text-align:center\">2.5h</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"思想\"><a class=\"markdownIt-Anchor\" href=\"#思想\">#</a> 思想</h2>\n<p>将一棵树划分为若干条链，转化为线性结构，从而用其它数据结构维护相关信息。</p>\n<p>重链剖分可以将树上的任意一条路径划分成不超过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 条连续的链，每条链上的点深度互不相同（即是自底向上的一条链，链上所有点的 LCA 为链的一个端点）。</p>\n<p>重链剖分还能保证划分出的每条链上的节点 DFS 序连续，因此可以方便地用一些维护序列的数据结构（如线段树）来维护树上路径的信息。</p>\n<h2 id=\"重链剖分\"><a class=\"markdownIt-Anchor\" href=\"#重链剖分\">#</a> 重链剖分</h2>\n<p>重链剖分是最常用的树链剖分方式：</p>\n<p>定义 重子节点 表示其子节点中子树最大的子节点。如果有多个子树最大的子节点，取其一。如果没有子节点，就无重子节点。</p>\n<p>定义 轻子节点 表示剩余的所有子节点。</p>\n<p>从这个节点到重子节点的边为 重边。</p>\n<p>到其他轻子节点的边为 轻边。</p>\n<p>若干条首尾衔接的重边构成 重链。</p>\n<p>把落单的节点也当作重链，那么整棵树就被剖分成若干条重链。</p>\n<h2 id=\"实现\"><a class=\"markdownIt-Anchor\" href=\"#实现\">#</a> 实现</h2>\n<p>运用到的数据结构为支持 单点 / 区间 修改 / 查询 的线段树，记作</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sjtu<span class=\"token double-colon punctuation\">::</span>SegmentTree<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> MAXN<span class=\"token operator\">></span> stree<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>首先进行两遍 dfs 建树</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> maxsiz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    siz<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fa<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> last<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        h<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> h<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        siz<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> siz<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> maxsiz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            maxsiz <span class=\"token operator\">=</span> siz<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            mson<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> last<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    key<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>ti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    tp<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    data<span class=\"token punctuation\">[</span>ti<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mson<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>mson<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> head<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> last <span class=\"token operator\">||</span> v <span class=\"token operator\">==</span> mson<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    las<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ti<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/ubuntu/",
            "url": "https://conless.dev/blog/cs/ubuntu/",
            "title": "服务器配置（失败）",
            "date_published": "2023-01-27T06:03:43.000Z",
            "content_html": "<h2 id=\"ubuntu-的安装\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu-的安装\">#</a> Ubuntu 的安装</h2>\n<h3 id=\"系统分区与系统盘制作\"><a class=\"markdownIt-Anchor\" href=\"#系统分区与系统盘制作\">#</a> 系统分区与系统盘制作</h3>\n<h3 id=\"进入-bios-引导\"><a class=\"markdownIt-Anchor\" href=\"#进入-bios-引导\">#</a> 进入 BIOS 引导</h3>\n<h3 id=\"ubuntu-的安装界面\"><a class=\"markdownIt-Anchor\" href=\"#ubuntu-的安装界面\">#</a> Ubuntu 的安装界面</h3>\n<h3 id=\"网络配置\"><a class=\"markdownIt-Anchor\" href=\"#网络配置\">#</a> 网络配置</h3>\n<h2 id=\"开发环境配置\"><a class=\"markdownIt-Anchor\" href=\"#开发环境配置\">#</a> 开发环境配置</h2>\n<h3 id=\"基础开发环境\"><a class=\"markdownIt-Anchor\" href=\"#基础开发环境\">#</a> 基础开发环境</h3>\n<p>按照环境配置指南，安装以下应用包：</p>\n<ul>\n<li>build-essential</li>\n<li>make</li>\n<li>cmake</li>\n<li>gdb</li>\n<li>valgrind</li>\n<li>git</li>\n<li>clangd<br>\n 为了更好的编程体验，我们推荐</li>\n<li>clang</li>\n<li>zsh</li>\n<li>vim</li>\n</ul>\n<h3 id=\"搭梯子\"><a class=\"markdownIt-Anchor\" href=\"#搭梯子\">#</a> 搭梯子</h3>\n<p>主要内容可见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94Yy52MnJheS5jeC9rbm93bGVkZ2ViYXNlLnBocD9hY3Rpb249ZGlzcGxheWFydGljbGUmYW1wO2lkPTUzMw==\">V2NET 官方教程</span>。<br>\n在本地需要另外设置环境变量  <code>ALL_PROXY=&quot;http://127.0.0.1:xxxx&quot;</code> ，其中 xxxx 是 Clash 的端口名。</p>\n<h3 id=\"终端美化\"><a class=\"markdownIt-Anchor\" href=\"#终端美化\">#</a> 终端美化</h3>\n<p>主要内容可见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzk3MTI1Mi9hcnRpY2xlL2RldGFpbHMvMTIyMjI1NzU3\">终端配置教程</span></p>\n<p>首先安装 oh-my-zsh:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> https://gitee.com/romkatv/powerlevel10k.git <span class=\"token variable\">$&#123;ZSH_CUSTOM<span class=\"token operator\">:-</span>$HOME<span class=\"token operator\">/</span>.oh-my-zsh<span class=\"token operator\">/</span>custom&#125;</span>/themes/powerlevel10k</pre></td></tr></table></figure><p>安装 powerlevel10k 主题:</p>\n<pre><code class=\"language-zsh\">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/\n</code></pre>\n<p>安装插件：</p>\n<pre><code class=\"language-zsh\">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-history-substring-search $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-history-substring-search\ngit clone https://github.com/paulirish/git-open.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/git-open\ngit clone https://github.com/makeitjoe/incr.zsh $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/incr\n</code></pre>\n<h3 id=\"挂载-ntfs-盘\"><a class=\"markdownIt-Anchor\" href=\"#挂载-ntfs-盘\">#</a> 挂载 NTFS 盘</h3>\n<p>按照正常方式挂载，但是需要调整挂载参数，见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2t1YnVudHUuY29tL3F1ZXN0aW9ucy8yMDgzMTgvaG93LXRvLWNob3duLW9uLWFuLW50ZnMtb3ItZmF0MzItcGFydGl0aW9u\">chown on NTFS</span><br>\n 我使用的挂载参数为 dev/nvme0n1p4 /mnt/d ntfs user,auto,rw,dev,exec,suid,async,utf8,dmask=000,fmask=111,uid=1000,gid=1000,umask=0000 0 0<br>\n 下次装没有 WSL 的电脑时最好还是挂载到 /home/user 下看着舒服</p>\n<h3 id=\"配置-git\"><a class=\"markdownIt-Anchor\" href=\"#配置-git\">#</a> 配置 git</h3>\n<p>参见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hY20uc2p0dS5lZHUuY24vd2lraS9Qcm9ncmFtbWluZ18yMDIyL0dpdA==\">Git Wiki</span></p>\n<pre><code class=\"language-zsh\">git config --global user.name 'Conless'\ngit config --global user.email 'conlesspan@outlook.com'\nssh-keygen -b 4096\ncat ~/.ssh/id_rsa.pub\n</code></pre>\n<h2 id=\"服务器配置\"><a class=\"markdownIt-Anchor\" href=\"#服务器配置\">#</a> 服务器配置</h2>\n<h3 id=\"ssh-基础配置\"><a class=\"markdownIt-Anchor\" href=\"#ssh-基础配置\">#</a> ssh 基础配置</h3>\n<pre><code class=\"language-zsh\">sudo apt install openssh-server\n</code></pre>\n<p>mark：不能在同一个路由器下 ssh 连接！</p>\n<h1 id=\"fuck-u-nvidia\"><a class=\"markdownIt-Anchor\" href=\"#fuck-u-nvidia\">#</a> Fuck U, Nvidia !</h1>\n",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/hello-world/",
            "url": "https://conless.dev/blog/cs/hello-world/",
            "title": "Hello, World!",
            "date_published": "2023-01-19T14:56:00.000Z",
            "content_html": "<p>欢迎来到 <a href=\"https://conless.dev\">Conless 的新博客</a>！本博客使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlv\">Hexo</span> 搭建，采用了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\">Shoka</span> 主题，希望大家喜欢。</p>\n<h2 id=\"搭建过程\"><a class=\"markdownIt-Anchor\" href=\"#搭建过程\">#</a> 搭建过程</h2>\n<h3 id=\"安装并配置-hexo\"><a class=\"markdownIt-Anchor\" href=\"#安装并配置-hexo\">#</a> 安装并配置 Hexo</h3>\n<ol>\n<li>安装 Git, Node</li>\n<li>安装 hexo-cli</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli</pre></td></tr></table></figure><ol start=\"3\">\n<li>初始化项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init conless.github.io</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> conless.github.io</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo server</pre></td></tr></table></figure><ol start=\"4\">\n<li>接下来就可以通过访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sb2NhbGhvc3Q6NDAwMA==\">https://localhost:4000</span> 访问博客了.</li>\n</ol>\n<h3 id=\"配置-shoka\"><a class=\"markdownIt-Anchor\" href=\"#配置-shoka\">#</a> 配置 Shoka</h3>\n<p>首先安装主题与依赖插件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> hexo-renderer-multi-markdown-it hexo-autoprefixer hexo-algoliasearch hexo-symbols-count-time hexo-feed</pre></td></tr></table></figure><p>再修改站点配置</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><p>并新建 _config.shoka.yml</p>\n<p>接下来可以进行相关配置，完成后通过</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p>传到远端即完成了建站。</p>\n<h3 id=\"github-pages-与自定义域名\"><a class=\"markdownIt-Anchor\" href=\"#github-pages-与自定义域名\">#</a> GitHub Pages 与自定义域名</h3>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TODO</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://conless.dev/blog/cs/gdkoi-note/",
            "url": "https://conless.dev/blog/cs/gdkoi-note/",
            "title": "GDKOI2021 游记",
            "date_published": "2021-01-20T03:25:43.000Z",
            "content_html": "<h2 id=\"day-1\"><a class=\"markdownIt-Anchor\" href=\"#day-1\">#</a> Day -1</h2>\n<p>从学农回来了，已经快两个月没碰过信息学了。。</p>\n<p>晚上家长还发了期末考排名。。挂的很厉害，要不是理科保命前 20 都没了。。</p>\n<p>看了看自己的博客发现 noip 游记果然咕了，等 WC2021 退役后再来统一更吧</p>\n<h2 id=\"day-0\"><a class=\"markdownIt-Anchor\" href=\"#day-0\">#</a> Day 0</h2>\n<p>划水</p>\n<h2 id=\"day-1-21130\"><a class=\"markdownIt-Anchor\" href=\"#day-1-21130\">#</a> Day 1 (21.1.30)</h2>\n<p>进场用了半小时看题，感觉 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>1</mn><mtext> </mtext><mi>T</mi><mn>2</mn><mtext> </mtext><mi>T</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">T1\\ T2\\ T3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">3</span></span></span></span> 可做，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">2</span></span></span></span> 很像之前 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">gsh</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span></span></span></span> 出的一题，但没深入想</p>\n<h3 id=\"t3\"><a class=\"markdownIt-Anchor\" href=\"#t3\">#</a> T3</h3>\n<p>按照开题顺序写吧，想了十分钟感觉可以直接预处理中心回文串 + 二分答案</p>\n<p>本来想上 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">manacher</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> 的，感觉自己不是很熟悉…</p>\n<p>码线段树打到一半发现可以直接静态用 ST 表做，然后花了大概 40min 写完过了大样例</p>\n<h3 id=\"t2\"><a class=\"markdownIt-Anchor\" href=\"#t2\">#</a> T2</h3>\n<p>之前没有认真想 gsh 那道题，导致这题搞了好久都没有搞出啥东西</p>\n<p>最后写了个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo>−</mo><mi>L</mi><mo stretchy=\"false\">)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O((R-L)logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> 的暴力，期望分 40-60</p>\n<h3 id=\"t1\"><a class=\"markdownIt-Anchor\" href=\"#t1\">#</a> T1</h3>\n<p>是个构造题，先打了送的 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>50</mn><mi>p</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">50pts</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span></span></span></span>，最后 50 分想不到遂写了个很吃数据的寻找增广路</p>\n<h3 id=\"t4\"><a class=\"markdownIt-Anchor\" href=\"#t4\">#</a> T4</h3>\n<p>没做</p>\n<p>出来后发现大家 T3 也基本都用马拉车切了，感觉自己的多个 log 应该也没太大问题</p>\n<p>T1 好像随机化比枚举找增广路更优，希望能骗到点分吧…</p>\n<p>T2 大家都说是原题，裂开</p>\n<p>T4 是一个任意模 NTT，好像有些人想到了但是没有码<br>\n估分 50+50+100=200</p>\n<p>裂开了…T1T2 全挂完了，T1 给我搞了个 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mi>e</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>c</mi><mi>t</mi><mtext> </mtext><mi>F</mi><mi>u</mi><mi>n</mi><mi>c</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">Restrict\\ Function</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span></span></span></span>，迷惑…</p>\n<p>实际 0+10+100</p>\n<p>gsh rk16 wlr 也很高</p>\n<p>裂开</p>\n<h2 id=\"day-2\"><a class=\"markdownIt-Anchor\" href=\"#day-2\">#</a> Day 2</h2>\n<p>感觉 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>1</mn><mtext> </mtext><mi>T</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">T1\\ T3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">1</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">3</span></span></span></span> 好像都不难，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">T4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">4</span></span></span></span> 依旧没认真看题，先开 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">T3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">3</span></span></span></span></p>\n<h3 id=\"t3-2\"><a class=\"markdownIt-Anchor\" href=\"#t3-2\">#</a> T3</h3>\n<p>还是回文串，还是不准备写 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>n</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">manacher</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span>（埋下伏笔）</p>\n<p>预处理完就很自然的从前往后推就好了</p>\n<h3 id=\"t1-2\"><a class=\"markdownIt-Anchor\" href=\"#t1-2\">#</a> T1</h3>\n<p>是一个很烂的线性期望，之前甚至做过很类似的题</p>\n<p>大概 15 分钟就码完了</p>\n<h3 id=\"t2-2\"><a class=\"markdownIt-Anchor\" href=\"#t2-2\">#</a> T2</h3>\n<p>送了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>40</mn><mi>p</mi><mi>t</mi><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">40pts</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">s</span></span></span></span></p>\n<p>然后苦思冥想了 2h…</p>\n<p>感觉应该是用数据结构维护后缀最小值，但是想了想感觉还是优化不了多少</p>\n<p>最后半小时发现确实是直接维护后缀边数就行了，赶紧乱码了个线段树跑过大样例</p>\n<p>预测要挂分，所以把暴力特判加了上去</p>\n<h3 id=\"t4-2\"><a class=\"markdownIt-Anchor\" href=\"#t4-2\">#</a> T4</h3>\n<p>没做</p>\n<p>T4 送了 30，心态炸裂</p>\n<p>前三题大家都做得差不多，T2 甚至还没多少人做出来，突然赶紧 rank 不会太低…</p>\n<p>估分 100+(60<sub>100)+100+0=260</sub>300</p>\n<p>继续裂开… 又挂分了</p>\n<p>T3 二分哈希被卡了 30pts</p>\n<p>T2 果然有很多细节没处理</p>\n<p>实际 100+40+70=210，rk60，又是 noip 的排名…</p>\n<p>dby 拿了 320 的准标准分，rk20<br>\nday1+day2 gsh 进队线了</p>\n<h2 id=\"day-3\"><a class=\"markdownIt-Anchor\" href=\"#day-3\">#</a> Day 3</h2>\n<p>看完题心态就有点小崩了，感觉除了 T2 都不可做，说不定今天连 100pts 都难</p>\n<p>T2 想了半小时还是只会暴力，遂先开 T1</p>\n<h3 id=\"t1-3\"><a class=\"markdownIt-Anchor\" href=\"#t1-3\">#</a> T1</h3>\n<p>很容易想到枚举重边再加上可能性，但是误以为只有一个或零个公共点的情况很难处理（实际上是最开始一直把 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Π</mi></mrow><annotation encoding=\"application/x-tex\">\\Pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Π</span></span></span></span> 当成 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Σ</span></span></span></span> 了…）</p>\n<p>以为是这里出了问题，导致小样例都过不去，只能跳了<br>\n最后才发现是累乘，直接裂开</p>\n<h3 id=\"t3-3\"><a class=\"markdownIt-Anchor\" href=\"#t3-3\">#</a> T3</h3>\n<p>试图找 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n=1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 的规律，结果画错了。。。</p>\n<p>遂暴力，期望得分 15</p>\n<h3 id=\"t4-3\"><a class=\"markdownIt-Anchor\" href=\"#t4-3\">#</a> T4</h3>\n<p>今天反而觉得 T4 是最好拿分的，速切了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>a</mi><mi>s</mi><mi>k</mi><mn>2</mn><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">subtask 2+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>，1 居然没有深入想，出考场发现是个裸的状压，血亏</p>\n<h3 id=\"t2-3\"><a class=\"markdownIt-Anchor\" href=\"#t2-3\">#</a> T2</h3>\n<p>想了半天数据结构，但是感觉应该搞不了，然后再想了想应该是一个多项式的东西，却不会卷…</p>\n<p>最后用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>d</mi><mi>e</mi><mi>r</mi><mi>e</mi><mi>d</mi><mi mathvariant=\"normal\">_</mi><mi>m</mi><mi>a</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">unordered\\_map</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00444em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">d</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span></span></span></span> 写了个暴力 + 去重，期望复杂度 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>+</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn+nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> 是 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> 的前缀和中不同数的个数）</p>\n<p>出考场发现大家估分都不高，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mi>C</mi><mi>A</mi><mi>d</mi><mi>a</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">MCAdam</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span></span></span></span> 切了 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">T1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">1</span></span></span></span> 大样例但是没处理细节，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">2</span></span></span></span> 果然是个卷积，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">T3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">3</span></span></span></span> n=1 性质很显然，而我甚至连打表都没想过…</p>\n<p>感觉今天难度远高于去年联合省选，感觉 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mi>O</mi><mi>I</mi><mn>2020</mn><mtext> </mtext><mi>D</mi><mi>a</mi><mi>y</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">NOI2020\\ Day1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">1</span></span></span></span> 可做的分都更多…</p>\n<p>估分 0+60+15+40=115</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">T2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">2</span></span></span></span> 没过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>50000</mn></mrow><annotation encoding=\"application/x-tex\">n=50000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>，gsh 和 czy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 过 5 万…</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">T4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord\">4</span></span></span></span> 挂了，每个捆绑测试点各挂了一两个点…</p>\n<p>今天连 T2 标准分 60 都没拿到，直接 rk200，裂开了</p>\n<h2 id=\"总结\"><a class=\"markdownIt-Anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>三天加起来挂了差不多 200，不过必须说确实是自己实力不济，做题量和速度不够导致没时间对拍其实也是必然的。</p>\n<p>总分 375，rk60-80，还是 noip 水平，不过这几个月确实完全没有做题，所以也确实是真实水平吧</p>\n<p>gsh rk16，在纪中校线限制下 rk10，感觉应该稳队了</p>\n<p>初三的 xzd rk30，又被吊打了</p>\n<p>必须要说其他人比自己就是努力多很多，所以这样的结果只能坦然接受，确实是技不如人</p>\n<p>其他的话 WC 以后再说吧，WC 于我而言应该纪念意义更强吧，毕竟冲击省队的希望确实不大，就当放松心情的娱乐周咯</p>\n<p>先这样吧。</p>\n",
            "tags": []
        }
    ]
}